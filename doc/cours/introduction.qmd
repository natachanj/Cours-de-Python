---
title: "Introduction à Python : Bases et Structures Fondamentales"
description: "[Slides](introduction-slides.html)"
author: "Natacha Njongwa Yepnga"
format: 
  html:
    toc: true
    toc-location: left
    toc-depth: 3
    number-sections: true
    number-depth: 2
  revealjs:
    theme: moon
    footer: "[Home](../../index.html) --- [Introduction à Python](introduction.html)"
    slide-number: c/t                    # collapsed/total
    slide-level: 3
    controls: true
    output-file: introduction-slides.html
mermaid:
  theme: forest
code-line-numbers: true
from: markdown+emoji
---

# Introduction à Python

##  Introduction

Python est un langage de programmation polyvalent, apprécié pour sa simplicité et sa lisibilité. Il est utilisé dans des domaines variés comme le développement web, la data science, et l’intelligence artificielle.

---

### Qu’est-ce que Python?

- Python est un langage interprété, open source, et multiplateforme.
- Créé par **Guido van Rossum** en 1989 (première version en 1991).
- Points forts :
  - Syntaxe simple et lisible.
  - Large écosystème de bibliothèques.

---

###  Conseils pour l’apprentissage de Python

- **Pratique régulière** : Codez régulièrement pour solidifier vos bases.
- **Explorez des projets simples** : Calculatrice, jeu de devinettes, gestion d’inventaire.
- **Utilisez les ressources disponibles** :
  - Documentation officielle : [python.org/doc](https://www.python.org/doc/).
  - Plateformes d'exercices : [LeetCode](https://leetcode.com/), [Hackerrank](https://www.hackerrank.com/).

---



### Installer et configurer Python

#### **Installer Python**

- Téléchargez Python depuis [python.org](https://www.python.org/).  

### **Outils recommandés pour coder en Python**

##### **Visual Studio Code (VS Code)**  
- **Qu'est-ce que VS Code ?**  
  - Un éditeur de code léger, puissant et extensible, développé par Microsoft.  
  - Idéal pour écrire et exécuter des scripts Python grâce à ses extensions.  

- **Installer VS Code** :  
  - Téléchargez-le sur [code.visualstudio.com](https://code.visualstudio.com/).  
  - Installez l'extension **Python** via le **Visual Studio Code Marketplace** :
    1. Ouvrez VS Code.
    2. Allez dans l'onglet des extensions (icône avec des blocs).
    3. Recherchez **Python** et cliquez sur "Installer".


---

##### **Anaconda**
- **Qu'est-ce qu'Anaconda ?**  
  - Une distribution Python incluant Jupyter Notebook, des bibliothèques populaires (NumPy, Pandas, Matplotlib, etc.) et un gestionnaire d'environnements.  
  - Idéal pour la data science et le machine learning.  

- **Installer Anaconda** :  
  - Téléchargez-le depuis [anaconda.com](https://www.anaconda.com/products/distribution).  
  - Suivez les instructions pour votre système d'exploitation (Windows, macOS, Linux).  

- **Avantages** :  
  - Configuration simplifiée pour débuter.  
  - Gestion facile des environnements virtuels avec `conda`. 
---

##### **Jupyter Notebook**
- **Qu'est-ce que Jupyter Notebook ?**  
  - Un environnement interactif où vous pouvez écrire et exécuter du code Python dans des blocs (appelés "cellules").  
  - Idéal pour la data science et les visualisations.  

- **Installer Jupyter Notebook** :  
  - Si vous avez Anaconda, Jupyter est préinstallé.  
  - Sinon, installez-le avec `pip` :  
    ```bash
    pip install notebook
    ```

---

##### **Google Colab**
- **Qu'est-ce que Google Colab ?**  
  - Un environnement en ligne gratuit pour coder en Python, développé par Google.  
  - Aucun besoin d'installer Python ou Jupyter : tout fonctionne dans votre navigateur.  
  - Avantage : accès à des GPU gratuits pour le machine learning.

- **Accéder à Google Colab** :  
  1. Rendez-vous sur [colab.research.google.com](https://colab.research.google.com/).  
  2. Connectez-vous avec un compte Google.  
  3. Créez un nouveau notebook en cliquant sur **New Notebook**.

- **Fonctionnalités clés** :  
  - Sauvegarde automatique sur Google Drive.  
  - Support intégré des bibliothèques populaires (NumPy, Pandas, Matplotlib, etc.).  
---



## Premiers pas avec Python

Python est un langage polyvalent, lisible et largement utilisé. Cette section vous guide à travers les bases essentielles pour bien commencer avec Python.

### Déclaration de variables
Une variable est un conteneur permettant de stocker des données. En Python, il suffit de nommer la variable et d'y attribuer une valeur :

```python
x = 5
y = "Python"
print(x, y)
```
---
### Les Commentaires en Python

Dans un script Python, tout ce qui suit le caractère `#` est ignoré par l’interpréteur jusqu’à la fin de la ligne. Ces lignes sont appelées **commentaires** et sont destinées à expliquer le code dans un langage humain.

---

#### Pourquoi utiliser des commentaires ?

- **Clarifier le code** : Expliquez des portions complexes pour vous ou d'autres développeurs.
- **Documenter le fonctionnement** : Fournir des indications sur le rôle d'un morceau de code ou d'une fonction.
- **Faciliter la maintenance** : Les commentaires rendent votre code plus compréhensible à long terme.

Les commentaires ne sont pas exécutés par Python et n'affectent donc pas les performances du programme.

---

Pour ajouter un commentaire, commencez la ligne avec un `#`. Python ignorera tout ce qui suit ce caractère jusqu’à la fin de la ligne.

**Exemple simple** :
```python
# Ceci est un commentaire simple
print("Hello world!")  # Affiche un message à l'écran

# Déclaration de variables
nom = "Alice"  # Nom de l'utilisateur
age = 25       # Âge de l'utilisateur

# Affichage des informations
print(f"Nom : {nom}")
print(f"Âge : {age}")

# Cette partie affiche une salutation
print("Bonjour et bienvenue dans le cours de Python !")

```
---

#### Bonnes pratiques pour les commentaires

- Soyez concis et clair
Vos commentaires doivent aller à l’essentiel et être compréhensibles.

```python
# Calcule la somme des éléments de la liste
total = sum([1, 2, 3, 4])
```

---

- Évitez les commentaires inutiles

Ne commentez pas des choses évidentes que le code lui-même exprime clairement.

**Exemple inutile** :
```python
# Attribue la valeur 5 à la variable x
x = 5
```

- Mettez à jour vos commentaires

Assurez-vous que vos commentaires reflètent toujours le fonctionnement réel du code, surtout après des modifications.

---


#### Différents types de commentaires

- Commentaires sur une ligne

Ils s'écrivent avec `#` au début de la ligne.

```python
# Ce programme affiche un message
print("Bienvenue en Python !")
```

---

- Commentaires multilignes

Pour commenter plusieurs lignes, vous pouvez utiliser `#` au début de chaque ligne ou une chaîne de caractères triple (`"""` ou `'''`) si le commentaire est temporaire.

```python
# Début du programme
# Ce script montre un exemple
# avec des commentaires multilignes.
```
Ou avec une chaîne triple :

```python
"""
Ce script illustre :
- L'utilisation de variables
- L'utilisation des commentaires
"""
```

---


# Les variables en Python

## Qu'est-ce qu'une variable ?
Une **variable** est un conteneur permettant de stocker une valeur ou des données. En Python, une variable peut contenir différents types de données comme des nombres, du texte, ou des structures complexes.

---


## Déclaration d'une variable
En Python, il suffit d'utiliser un nom valide et de lui assigner une valeur avec le symbole `=`.

**Exemple** :
```python
# Déclaration de variables
nom = "Alice"   # Chaîne de caractères
age = 25        # Entier
pi = 3.14       # Nombre flottant
est_actif = True  # Booléen
```
---

##  Les Types de Base en Python

Python propose plusieurs types de données de base, essentiels pour la manipulation des informations.

---
### Comment connaître le type d'une variable en Python ?

Python propose une fonction intégrée appelée `type()` pour déterminer le type de données d'une variable.

---

#### Utilisation de `type()`

La fonction `type()` prend une variable en argument et retourne son type.

Exemples de types que vous pourriez rencontrer :
- `str` : Chaîne de caractères
- `int` : Entier
- `float` : Nombre décimal
- `bool` : Valeur logique
---

Ces types de base constituent les fondations des programmes en Python et sont utilisés dans presque tous les scripts.

####  Chaînes de caractères (`str`)
Les chaînes de caractères permettent de stocker du texte. Elles peuvent être utilisées pour manipuler des mots, des phrases ou des caractères individuels.


**Exemple** :
```python
# Déclaration de variables
nom = "Alice"   # Chaîne de caractères
type(nom)
```
---

###   Entiers (`int`)
Les entiers représentent des nombres sans décimales, qu'ils soient positifs ou négatifs.

**Exemple** :
```python
# Déclaration de variables
age = 25        # Entier
type(age)
```
---

###  Flottants (`float`)
Les flottants représentent des nombres avec des décimales, idéaux pour des calculs nécessitant des fractions.
**Exemple** :
```python
# Déclaration de variables
pi = 3.14       # Nombre flottant
type(pi)
```
---

### Booléens (`bool`)
Les booléens sont des valeurs logiques, pouvant être `True` (vrai) ou `False` (faux). Ils sont souvent utilisés pour effectuer des comparaisons ou contrôler le flux d'un programme.
**Exemple** :
```python
# Déclaration de variables
est_actif = True  # Booléen
type(est_actif)
```
---

### Résumé des types de base

| Type   | Description                  |
|--------|------------------------------|
| `str`  | Chaîne de caractères         |
| `int`  | Nombres entiers              |
| `float`| Nombres décimaux             |
| `bool` | Valeurs logiques (True/False)|

---


# Afficher des résultats en Python

Afficher des résultats est une étape essentielle pour visualiser les données et comprendre ce que fait votre programme. En Python, l'affichage se fait principalement avec la fonction `print()`.

---

## La fonction `print()`

`print()` est utilisée pour afficher des informations dans la console. Elle permet de montrer le contenu de variables, des messages, ou des résultats de calcul.

**Exemple** :
```python
print(valeur)
```


---

## Afficher plusieurs éléments

Vous pouvez afficher plusieurs éléments en même temps en les séparant par des virgules. Python ajoute automatiquement un espace entre ces éléments.

**Exemple** :
```python
print("Bonjour", "Python", 3.10)
```
---

## Formatage des chaînes

Pour des affichages dynamiques et lisibles, plusieurs méthodes de formatage sont disponibles :

- **Concaténation avec `+`** : Combine des chaînes de caractères.

```python
nom = "Alice"
print("Bonjour, " + nom)
```
- **Substitution avec `f-strings`** : Insère directement des variables dans une chaîne avec une syntaxe claire.

```python
nom = "Alice"
age = 25
print(f"Bonjour, je m'appelle {nom} et j'ai {age} ans.")
```

- **Méthode `format()`** : Insère des variables dans une chaîne avec des positions spécifiques.
```python
nom = "Alice"
age = 25
print("Bonjour, je m'appelle {} et j'ai {} ans.".format(nom, age))
```
---


## Caractères spéciaux

Certaines séquences spéciales permettent de modifier l'affichage :
- `\\n` : Effectue un saut de ligne.
- `\\t` : Ajoute une tabulation.

Ces caractères sont utiles pour structurer l'affichage dans la console.

```python
print("Bonjour\\nPython")
print("Nom:\\tAlice")
```
---

## Contrôler la fin de l'affichage

Par défaut, chaque appel à `print()` termine par un saut de ligne. Il est possible de modifier ce comportement pour afficher plusieurs éléments sur la même ligne.
```python
print("Bonjour", end=" ")
print("Python !")
```
---

## Résumé

| Méthode                | Description                                       |
|------------------------|---------------------------------------------------|
| `print()`              | Affiche des données dans la console.             |
| Concaténation          | Combine plusieurs chaînes de caractères.          |
| `f-strings`            | Insère des variables directement dans une chaîne.|
| `.format()`            | Formate une chaîne avec des variables.           |
| Caractères spéciaux    | Modifie l'apparence (nouvelle ligne, tabulation). |

---

# Les Structures conditionnelles et les Boucles

Les structures conditionnelles et les boucles permettent de contrôler le flux d'un programme en fonction de certaines conditions ou de répéter des actions.

---

## Les Structures conditionnelles

Les structures conditionnelles permettent d'exécuter des blocs de code uniquement si une condition est remplie.
---


### La condition `if`

La condition `if` est utilisée pour vérifier si une expression est vraie. Si c'est le cas, le bloc de code associé est exécuté.

#### Syntaxe de base 

```python
if condition:
    # Code à exécuter si la condition est vraie
```

---
#### Exemple simple
```python
nombre = 10

if nombre > 0:
    print("Le nombre est positif.")

```
---

#### Ajout de `else`
L'instruction `else` permet d'exécuter un bloc de code si la condition est fausse.

```python
nombre = -5
if nombre > 0:
    print("Le nombre est positif.")
else:
    print("Le nombre est négatif ou nul.")
```
---

#### Ajout de `elif`

L'instruction `elif` permet de vérifier plusieurs conditions successives.

```python
nombre = 0

if nombre > 0:
    print("Le nombre est positif.")
elif nombre == 0:
    print("Le nombre est nul.")
else:
    print("Le nombre est négatif.")
```
---


### Conditions imbriquées
Les `if` peuvent être imbriqués pour vérifier des conditions multiples.
```python
age = 20
citoyen = True

if age >= 18:
    if citoyen:
        print("Vous pouvez voter.")
    else:
        print("Vous ne pouvez pas voter, même si vous êtes majeur.")
else:
    print("Vous êtes mineur.")
```
---




### Comparaisons en Python

Les opérateurs de comparaison permettent d'évaluer des expressions.

| Opérateur | Description                      |
|-----------|----------------------------------|
| `==`      | Égalité                          |
| `!=`      | Différence                       |
| `<`       | Inférieur à                      |
| `<=`      | Inférieur ou égal à              |
| `>`       | Supérieur à                      |
| `>=`      | Supérieur ou égal à              |

---


### Opérateurs logiques

Les opérateurs logiques permettent de combiner plusieurs conditions.

| Opérateur | Description                        |
|-----------|------------------------------------|
| `and`     | Toutes les conditions doivent être vraies. |
| `or`      | Au moins une des conditions doit être vraie. |
| `not`     | Inverse le résultat de la condition. |

---

## Les Boucles en Python

Les boucles permettent de répéter des actions tant qu'une condition est vraie ou pour un nombre fixe d'itérations.

---

### La boucle `for`

1. La boucle `for` est utilisée pour parcourir une séquence (liste, chaîne de caractères, etc.).
2. Chaque élément de la séquence est traité successivement.

---

### La boucle `while`

1. La boucle `while` répète un bloc de code tant qu'une condition est vraie.
2. Attention aux boucles infinies : assurez-vous que la condition de sortie est atteinte.

---


### Contrôle des boucles

| Instruction | Description                                                                  |
|-------------|------------------------------------------------------------------------------|
| `break`     | Interrompt la boucle immédiatement, même si la condition n'est pas terminée. |
| `continue`  | Passe à l'itération suivante sans exécuter le reste du bloc de code actuel.  |
| `pass`      | Ne fait rien. Utilisé comme espace réservé dans une boucle ou une condition. |

---

## Résumé

| Structure        | Description                                                                 |
|------------------|-----------------------------------------------------------------------------|
| `if`             | Exécute un bloc si une condition est vraie.                                 |
| `elif`           | Ajoute des conditions supplémentaires.                                      |
| `else`           | Définit un bloc exécuté si toutes les conditions sont fausses.              |
| `for`            | Parcourt une séquence ou un intervalle.                                     |
| `while`          | Répète un bloc tant qu'une condition est vraie.                             |
| `break`          | Interrompt une boucle.                                                      |
| `continue`       | Saute à l'itération suivante.                                               |
| `pass`           | Ne fait rien (utile pour des blocs vides).                                  |




Avec ces structures, vous pouvez écrire des programmes dynamiques et efficaces en Python !

---
