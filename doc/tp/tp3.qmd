---
title: "Manipulation de données avec Numpy"
description: Manipulation de données avec Numpy
author: "Natacha NJONGWA YEPNGA"
format: 
  html:
    toc: true
    toc-location: left
    toc-depth: 3
from: markdown+emoji
number-sections: true
number-depth: 3
---


# TP : Manipulation de données avec Numpy

## Objectifs du TP

- Comprendre l'utilisation du module NumPy pour le calcul scientifique.
- Créer et manipuler des tableaux multidimensionnels.
- Appliquer des opérations mathématiques et statistiques sur des données.
- Explorer les masques booléens pour des filtrages avancés.


Vous pouvez télécharger le fichier .ipynb en cliquant [ici](https://drive.google.com/file/d/1fIvIhdF7norgZ5y_FdIh43YhQt3NQhJt/view?usp=drive_link)


## 1. Introduction à NumPy

NumPy (Numerical Python) est une bibliothèque puissante pour manipuler des tableaux et effectuer des calculs scientifiques. Elle est optimisée pour la performance et largement utilisée dans l'analyse de données.

### Pourquoi utiliser NumPy ?
- **Performance :** Calculs rapides grâce à une implémentation en C.
- **Simplicité :** Manipulation intuitive des tableaux multidimensionnels.
- **Richesse fonctionnelle :** Nombreuses fonctions mathématiques, algébriques, et statistiques.

## 2. Création de tableaux

```python
import numpy as np

# Tableau 1D
A = np.array([1, 2, 3])

# Tableau 2D
B = np.array([[1, 2], [3, 4]])
print(A)
print(B)

# Zéros et Uns
zeros = np.zeros((3, 3))
ones = np.ones((2, 4))
print(zeros)
print(ones)

# Valeurs aléatoires
random = np.random.random((3, 3))
print(random)

# Plages de valeurs
arange = np.arange(0, 10, 2)
linspace = np.linspace(0, 1, 5)
print(arange)
print(linspace)

# Informations sur un tableau
print(B.shape)  # Dimensions
print(B.size)   # Nombre d'éléments
print(B.dtype)  # Type des éléments
```

## 3. Accès et modifications

```python
# Accéder aux éléments
print(B[0, 1])
print(B[:, 1])
print(B[1, :])

# Modifier des éléments
B[0, 0] = 100
print(B)

# Ajouter des éléments
A = np.append(A, [4, 5])
print(A)

# Supprimer des éléments
C = np.delete(A, [0, 1])
print(C)
```

## 4. Opérations mathématiques et statistiques

```python
# Opérations arithmétiques
D = B + 10
print(D)

E = B * 2
print(E)

# Statistiques
print(np.sum(B))
print(np.mean(B))
print(np.std(B))

# Masques booléens
mask = B > 2
print(mask)
print(B[mask])

# Modification conditionnelle
B[B > 2] = -1
print(B)
```

## Exercices pratiques

### Exercice 1 : Création et manipulation
1. Créez un tableau 3x3 contenant des valeurs aléatoires entre 0 et 1.
2. Remplacez les valeurs inférieures à 0.5 par 0.
3. Calculez la somme et la moyenne des éléments du tableau.

### Exercice 2 : Manipulation avancée
1. Créez un tableau 1D de 10 éléments entre 1 et 100.
2. Supprimez les trois derniers éléments et ajoutez deux nouveaux.
3. Remplacez les valeurs paires par -1.

### Exercice 3 : Statistiques et masques
1. Créez une matrice 4x4 contenant des valeurs aléatoires entre -10 et 10.
2. Utilisez un masque pour remplacer les valeurs négatives par leur valeur absolue.
3. Calculez la moyenne des valeurs finales.

## Récapitulatif

- NumPy permet de manipuler efficacement des tableaux pour des calculs rapides.
- Les masques booléens offrent des possibilités puissantes pour le filtrage et la modification des données.
- L'utilisation des opérations vectorisées améliore grandement les performances.

### Ressources supplémentaires
- [Documentation officielle NumPy](https://numpy.org/doc/)

